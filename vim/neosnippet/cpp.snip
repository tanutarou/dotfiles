include c.snip

snippet kruskal
abbr get minimum spanning tree 
    // Union Find
    const int MAX_N = ${1};
    int par[MAX_N], tree_rank[MAX_N];
    void init_union_find(int n){
        for(int i=0; i<n; i++){
            par[i] = i;
            tree_rank[i] = 0;
        }
    }

    int root(int x){
        return par[x] == x ? x : par[x] = root(par[x]);
    }

    bool same(int x, int y){
        return root(x) == root(y);
    }

    void unite(int x, int y){
        x = root(x);
        y = root(y);
        if(x == y) return;

        if(tree_rank[x] < tree_rank[y]){
            par[x] = y;
        }else{
            par[y] = x;
            if(tree_rank[x] == tree_rank[y]) tree_rank[x]++;
        }
    }

    // Kruskal
    struct edge{int u, v, cost;};
    bool comp(const edge& e1, const edge& e2){
        return e1.cost < e2.cost;
    }

    const int MAX_E = ${0};
    edge es[MAX_E];
    int kruskal(int node_n, int edge_n){
        sort(es, es + edge_n, comp);
        init_union_find(node_n);
        int res = 0;
        for(int i=0; i<edge_n; i++){
            edge e = es[i];
            if(!same(e.u, e.v)){
                unite(e.u, e.v);
                res += e.cost;
            }
        }
        return res;
    }

snippet unionfind
    const int MAX_N = ${0:TARGET}
    int par[MAX_N], tree_rank[MAX_N];
    void init(int n){
        for(int i=0; i<n; i++){
            par[i] = i;
            tree_rank[i] = 0;
        }
    }

    int root(int x){
        return par[x] == x ? x : par[x] = root(par[x]);
    }

    bool same(int x, int y){
        return root(x) == root(y);
    }

    void unite(int x, int y){
        x = root(x);
        y = root(y);
        if(x == y) return;

        if(tree_rank[x] < tree_rank[y]){
            par[x] = y;
        }else{
            par[y] = x;
        }else{
            par[y] = x;
            if(tree_rank[x] == tree_rank[y]) tree_rank[x]++;
        }
    }

snippet gcd
abbr get greatest common divisor
    long long gcd(long long a, long long b){
      long long c;
      while ( a != 0 ) {
         c = a; a = b%a; b = c;
      }
      return b;
    }

snippet lcm
abbr get least common multiple
    long long lcm(long long a, long long b){
        if(a == 0 || b == 0) return 0;
        return a / gcd(a, b) * b;
    }

snippet eratos
abbr get prime list and is_prime list
    const int N = ${0:TARGET};
    bool is_prime[N+1];
    vector<long long> prime;
    void Eratos(){
        for(int i=0; i<N; i++){
            is_prime[i] = true;
        }
        is_prime[0] = is_prime[1] = false;
        for(int i=2; i<=N; i++){
            if(is_prime[i]){
                for(int j=2; i*j<=N; j++){
                    is_prime[i*j] = false;
                }
            }
        }

        for(int i=2; i<=N; i++){
            if(is_prime[i]){
                prime.push_back(i);
            }
        }
    }

snippet dijkstra
abbr get shortest path
    const int MAX_N = ${0:TARGET}
    struct edge{int to, cost;};
    typedef pair<int, int> P;

    vector<edge> G[MAX_N];
    int d[MAX_N];

    /*
    ダイクストラ法による単一始点最短経路問題solver
    n : ノード数
    s : 開始ノード(0-indexed)
    */
    void dijkstra(int n, int s){
        priority_queue<P, vector<P>, greater<P> > que;
        fill(d, d+n, INF);
        d[s] = 0;
        que.push(P(0, s));
    
        while(!que.empty()){
            P p = que.top(); que.pop();
            int v = p.second;
            if(d[v] < p.first) continue;
            for(int i=0; i < G[v].size(); i++){
                edge e = G[v][i];
                if(d[e.to] > d[v] + e.cost){
                    d[e.to] = d[v] + e.cost;
                    que.push(P(d[e.to], e.to));
                }
            }
        }
    }
